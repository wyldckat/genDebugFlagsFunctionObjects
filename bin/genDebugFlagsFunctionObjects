#!/bin/sh
#
#License
#    This file is NOT part of OpenFOAM, but is heavily based on it's code.
#    This was not endorsed by SGI Corp, the trademark owners of OpenFOAM.
#
#    Home page for this script:
#       https://github.com/wyldckat/genDebugFlagsFunctionObjects
#
#    OpenFOAM official website: http://www.openfoam.org
#
#    Both this code and OpenFOAM are free software: you can redistribute 
#    it and/or modify it under the terms of the GNU General Public License 
#    as published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This code is distributed in the hope that it will be useful, but WITHOUT
#    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this source code.  If not, see <http://www.gnu.org/licenses/>.
#
#Description
#    genDebugFlagsFunctionObjects will recreate OpenFOAM's folder structure
#    as function objects for allowing modification of debug flags at runtime.
#

#Coding mental notes:
# Names to be renamed:
#   dummyFO
#   dummyFunctionObject
#   controlDict.dummyFO
#     dummyPlug
#     DUMMYCONTROLS

# File "Make/options" has to be created from scratch. Template:
# EXE_INC = -I$(LIB_SRC)/finiteVolume/lnInclude
# LIB_LIBS = -lfiniteVolume

# Code -----------------------------------------------------------------------

#First, generate the list of libraries to be reinterpreted to debug flags
#function objects.
echo "Gathering folder list..."
FOLDERS=""
for makeFolder in $(find ${FOAM_SRC} -name Make) \
                  $(find ${FOAM_APP} -name Make); do

  if [ -e "${makeFolder}/files" ]; then

    if [ $(grep "_LIBBIN" ${makeFolder}/files | wc -l) -gt 0 ]; then

      #Library detected - retrieve library path
      FOLDERS="$FOLDERS ${makeFolder%/*}"

    fi

  fi

done

#Now go through the list of folders and generate debug flags function object
cd ${0%/*}
cd ..
SCRIPT_PATH=$(pwd)
TARGET_BASE_FOLDER=${SCRIPT_PATH}
SOURCE_DUMMY_FOLDER=${SCRIPT_PATH}/etc/dummyFunctionObject

set -xe

#generate function objects
echo "Generating Debug Flags Function Objects..."
for folder in ${FOLDERS}; do
  
  echo "Now processing: $folder"

  #go into the working folder, just in case...
  cd ${TARGET_BASE_FOLDER}

  #get relative folder path for recreating in the TARGET_BASE_FOLDER
  RELATIVE_PATH=$(echo ${folder} | sed -e 's='$WM_PROJECT_DIR'/*==')
  
  #get library name
  LIBRARY_NAME=$(grep -e "^LIB" ${folder}/Make/files | sed 's=.*/lib\([A-Za-z0-9]*\)[.so]*=\1=')
  
  #skip object-only libraries
  [ -n "$(echo $LIBRARY_NAME | grep -e "^LIB")" ] && continue
  
  #target folder
  TARGET_FOLDER=${TARGET_BASE_FOLDER}/${RELATIVE_PATH}
  
  #create target folder
  mkdir -p ${TARGET_FOLDER} 2> /dev/null

  #copy dummy files to the target folder
  cp -r ${SOURCE_DUMMY_FOLDER}/* ${TARGET_FOLDER}/
  
  #go into the target folder
  cd ${TARGET_FOLDER}
  
  #define names
  CLASS_NAME=${LIBRARY_NAME}DebugFlags
  FUNCTION_OBJECT_NAME=${LIBRARY_NAME}DebugFlagsFunctionObject
  
  #rename files
  mv dummyFO.H ${CLASS_NAME}.H
  mv dummyFO.C ${CLASS_NAME}.C
  mv dummyFunctionObject.H ${FUNCTION_OBJECT_NAME}.H
  mv dummyFunctionObject.C ${FUNCTION_OBJECT_NAME}.C
  #these three are not needed
  rm controlDict.dummyFO dummyFOCList.H dummyFOIncludeList.H
  
  #rename class names inside the source files
  sed -i -e 's=dummyFO='${CLASS_NAME}'=g' ${CLASS_NAME}.H
  sed -i -e 's=dummyFO='${CLASS_NAME}'=g' ${CLASS_NAME}.C

  sed -i -e 's=dummyFO='${CLASS_NAME}'=g' \
      -e 's=dummyFunctionObject='${FUNCTION_OBJECT_NAME}'=g' \
      ${FUNCTION_OBJECT_NAME}.H
  sed -i -e 's=dummyFO='${CLASS_NAME}'=g' \
      -e 's=dummyFunctionObject='${FUNCTION_OBJECT_NAME}'=g' \
      ${FUNCTION_OBJECT_NAME}.C

  sed -i -e 's=dummyFO='${CLASS_NAME}'=g' \
      -e 's=dummyFunctionObject='${FUNCTION_OBJECT_NAME}'=g' \
      Make/files

  sed -i -e 's=dummyFO='${CLASS_NAME}'=g' controlDict
  
  #Generate class list
  export CLASS_FULL_LIST=""
  export CLASS_NAME_LIST=""
  
  # For each file, search for type definition and sub-namespaces
  for file in $(find ${folder} -name "*.C" | grep -v "lnInclude"); do

    #get line for defineTypeNameAndDebug; the first one is enough
    lines_def=$(grep -nh 'defineTypeNameAndDebug' ${file} | \
                sed 's=^\([0-9]*\).*=\1=' | head -1)
    
    [ -z "$lines_def" ] && continue
    
    #get namespace lines that are not Foam
    lines_names=$(grep -nh 'namespace' ${file} | grep -v 'Foam' | \
                  sed 's=^\([0-9]*\).*=\1=')

    #Attempt concatenating subspace names
    export SUBNAMESPACE=""
    [ -n "$lines_names" ] && \
    for number in $lines_names; do
      
      if [ ${number} -lt ${lines_def} ]; then
        
        THE_NAME=$(grep -nh 'namespace' ${file} | grep -e '^'${number} | \
                   sed -e 's=.*namespace *\([A-Za-z0-9]*\) *{*=\1=')
        export SUBNAMESPACE="${SUBNAMESPACE}${THE_NAME}::"
        
      else
        break
      fi
      
    done
    
    #get class names and add them to the list
    for class_name in $(grep -h 'defineTypeNameAndDebug' ${file} | \
                        sed -e 's=.*(\(.*\),.*=\1=')
    do

      #Add classes to full list, e.g. Foam::schemes
      export CLASS_FULL_LIST="${CLASS_FULL_LIST} ${SUBNAMESPACE}${class_name}"

      #Add classes to name list, e.g. schemes
      export CLASS_NAME_LIST="${CLASS_NAME_LIST} ${class_name##*::}"
      
    done
    
  done
  
  #Now that we have the class list, we generate the files with these classes
  # 1- generate include list
  (
    for class_name in ${CLASS_NAME_LIST}; do
      
      echo "#include \"${class_name}.H\""
      
    done 
  ) | sort -u >> ${CLASS_NAME}IncludeList.H
  
  
  # 2- generate dictionary read lines
  (
    for class_name in ${CLASS_FULL_LIST}; do
      
      echo "dict.lookup(\"$class_name\") >> ${class_name}::debug;"
      
    done
  ) | sort -u >> ${CLASS_NAME}CList.H
  
  
  # 3- generate controlDict
  #   a) header
  export CLASS_NAME
  export FUNCTION_OBJECT_NAME
  (
    echo "${CLASS_NAME}Plug"
    echo "{"
    echo "      type            ${CLASS_NAME};"
    echo "      functionObjectLibs (\"lib"${FUNCTION_OBJECT_NAME}".so\");"
    echo "      outputControl   timeStep;"
    echo "      outputInterval  1;"
    echo ""
  ) > controlDict.${CLASS_NAME}

  #   b) list of flags
  (
    for class_name in ${CLASS_FULL_LIST}; do
      
      echo "      $class_name   0;"
      
    done
  ) | sort -u >> controlDict.${CLASS_NAME}

  #   c) end list
  echo "}" >> controlDict.${CLASS_NAME}
  
  
  # 4- Generate Make/options
  echo "EXE_INC = -I\$(WM_PROJECT_DIR)/${RELATIVE_PATH}/lnInclude" > Make/options
  echo "LIB_LIBS = -l${LIBRARY_NAME}" >> Make/options

done

echo "All done! To complete, run:"
echo "  cd ${TARGET_BASE_FOLDER}"
echo "  wmake all"
